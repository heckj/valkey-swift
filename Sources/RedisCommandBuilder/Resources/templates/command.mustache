{{%CONTENT_TYPE: TEXT}}
    /// {{summary}}
    /// Version: {{version}}
{{#complexity}}
    /// Complexity: {{.}}
{{/complexity}}
    /// Categories: {{#categories}}{{.}}{{^last()}}, {{/last()}}{{/categories}}
    public func {{funcName}}({{#parameters}}{{name}}: {{type}}{{#multiple}}...{{/multiple}}{{^last()}}, {{/last()}}{{/parameters}}) async throws -> RESP3Token {
        let response = try await send({{funcName}}Command({{#parameters}}{{name}}: {{name}}{{^last()}}, {{/last()}}{{/parameters}}))
        return response
    }
    @inlinable
    public func {{funcName}}Command({{#parameters}}{{name}}: {{#multiple}}[{{type}}]{{/multiple}}{{^multiple}}{{type}}{{/multiple}}{{^last()}}, {{/last()}}{{/parameters}}) -> RESP3Command {
{{#buildArgs}}
{{#arguments}}
{{#first()}}
{{#multiple}}
        {{#oneArg}}let{{/oneArg}}{{^oneArg}}var{{/oneArg}} arguments: [String] = {{arrayParameter}}
{{/multiple}}
{{^multiple}}
{{#optional}}
        {{#oneArg}}let{{/oneArg}}{{^oneArg}}var{{/oneArg}} arguments: [String] = {{arrayParameter}}
{{/optional}}
{{^optional}}
        var arguments: [String] = [{{parameter}}]
{{/optional}}
{{/multiple}}
{{/first()}}
{{/arguments}}
{{#arguments}}
{{^first()}}
{{#multiple}}
        arguments.append(contentsOf: {{arrayParameter}})
{{/multiple}}
{{^multiple}}
{{#optional}}
        arguments.append(contentsOf: {{arrayParameter}})
{{/optional}}
{{^optional}}
        arguments.append({{parameter}})
{{/optional}}
{{/multiple}}
{{/first()}}
{{/arguments}}
        return .init("{{commandName}}", arguments: arguments)
{{/buildArgs}}    
{{^buildArgs}}
        .init("{{commandName}}", arguments: [{{#arguments}}{{parameter}}{{^last()}}, {{/last()}}{{/arguments}}])
{{/buildArgs}}    
    }
