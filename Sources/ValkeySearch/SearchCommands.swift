//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 Apple Inc. and the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore
import Valkey

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

public enum FT {
    /// Creates an empty search index and initiates the backfill process
    public struct CREATE: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("FT.CREATE")
        }
    }

    /// Drop the index created by FT.CREATE command. It is an error if the index doesn't exist
    public struct DROPINDEX: ValkeyCommand {
        public var key: ValkeyKey

        @inlinable public init(key: ValkeyKey) {
            self.key = key
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("FT.DROPINDEX", key)
        }
    }

    /// Detailed information about the specified index is returned
    public struct INFO: ValkeyCommand {
        public var key: ValkeyKey

        @inlinable public init(key: ValkeyKey) {
            self.key = key
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("FT.INFO", key)
        }
    }

    /// Performs a search of the specified index. The keys which match the query expression are returned
    public struct SEARCH<Query: RESPStringRenderable>: ValkeyCommand {
        public var index: ValkeyKey
        public var query: Query

        @inlinable public init(index: ValkeyKey, query: Query) {
            self.index = index
            self.query = query
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(index) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("FT.SEARCH", index, RESPBulkString(query))
        }
    }

    /// Lists the currently defined indexes
    public struct LIST: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("FT._LIST")
        }
    }

}

extension ValkeyConnectionProtocol {
    /// Creates an empty search index and initiates the backfill process
    ///
    /// - Documentation: [FT.CREATE](https:/valkey.io/commands/ft.create)
    /// - Complexity: Construction time O(N log N), where N is the number of indexed items
    @inlinable
    public func ftCreate() async throws -> FT.CREATE.Response {
        try await send(command: FT.CREATE())
    }

    /// Drop the index created by FT.CREATE command. It is an error if the index doesn't exist
    ///
    /// - Documentation: [FT.DROPINDEX](https:/valkey.io/commands/ft.dropindex)
    /// - Complexity: O(N)
    @inlinable
    public func ftDropindex(key: ValkeyKey) async throws -> FT.DROPINDEX.Response {
        try await send(command: FT.DROPINDEX(key: key))
    }

    /// Detailed information about the specified index is returned
    ///
    /// - Documentation: [FT.INFO](https:/valkey.io/commands/ft.info)
    /// - Complexity: O(1)
    @inlinable
    public func ftInfo(key: ValkeyKey) async throws -> FT.INFO.Response {
        try await send(command: FT.INFO(key: key))
    }

    /// Performs a search of the specified index. The keys which match the query expression are returned
    ///
    /// - Documentation: [FT.SEARCH](https:/valkey.io/commands/ft.search)
    /// - Complexity: O(log N)
    @inlinable
    public func ftSearch<Query: RESPStringRenderable>(index: ValkeyKey, query: Query) async throws -> RESPToken {
        try await send(command: FT.SEARCH(index: index, query: query))
    }

    /// Lists the currently defined indexes
    ///
    /// - Documentation: [FT._LIST](https:/valkey.io/commands/ft._list)
    /// - Complexity: O(1)
    @inlinable
    public func ftList() async throws -> FT.LIST.Response {
        try await send(command: FT.LIST())
    }

}
